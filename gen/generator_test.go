package gen

import (
	"github.com/google/go-cmp/cmp"
	"gitlab.com/osaki-lab/reguerr"
	"testing"
)

func TestGenerate(t *testing.T) {
	type arg struct {
		file *File
		opts []Option
	}
	tests := []struct {
		name    string
		args    arg
		want    string
		wantErr bool
	}{
		{
			name: "multiple_declare",
			args: arg{
				file: &File{
					PkgName: "example",
					Decls: []*Decl{
						{
							Name:   "InvalidInputParameterErr",
							Code:   "1003",
							Format: "invalid input parameter",
						},
						{
							Name:   "UpdateConflictErr",
							Code:   "1004",
							Format: "other user updated",
						},
					},
				},
			},
			want: `// generated by reguerr; DO NOT EDIT
package example

import (
	"errors"
	"gitlab.com/osaki-lab/reguerr"
)

func NewInvalidInputParameterErr(err error) *reguerr.Error {
	return InvalidInputParameterErr.WithError(err)
}

func IsInvalidInputParameterErr(err error) bool {
	var cerr *reguerr.Error
	if as := errors.As(err, &cerr); as {
		if cerr.Code == InvalidInputParameterErr.Code {
			return true
		}
	}
	return false
}

func NewUpdateConflictErr(err error) *reguerr.Error {
	return UpdateConflictErr.WithError(err)
}

func IsUpdateConflictErr(err error) bool {
	var cerr *reguerr.Error
	if as := errors.As(err, &cerr); as {
		if cerr.Code == UpdateConflictErr.Code {
			return true
		}
	}
	return false
}
`,
			wantErr: false,
		},
		{
			name: "DisableErr=true",
			args: arg{
				file: &File{
					PkgName: "example",
					Decls: []*Decl{
						{
							Name:       "InvalidInputParameterErr",
							Code:       "1003",
							Format:     "invalid input parameter: %v",
							DisableErr: true,
						},
					},
				},
			},
			want: `// generated by reguerr; DO NOT EDIT
package example

import (
	"errors"
	"gitlab.com/osaki-lab/reguerr"
)

func NewInvalidInputParameterErr(arg1 interface{}) *reguerr.Error {
	return InvalidInputParameterErr.WithArgs(arg1)
}

func IsInvalidInputParameterErr(err error) bool {
	var cerr *reguerr.Error
	if as := errors.As(err, &cerr); as {
		if cerr.Code == InvalidInputParameterErr.Code {
			return true
		}
	}
	return false
}
`,
			wantErr: false,
		},
		{
			name: "Label",
			args: arg{
				file: &File{
					PkgName: "example",
					Decls: []*Decl{
						{
							Name:   "InvalidInputParameterErr",
							Code:   "1003",
							Format: "invalid input parameter: %v",
							Labels: []Label{
								{
									Index:  0,
									Name:   "payload",
									GoType: "[]string",
								},
							},
						},
					},
				},
			},
			want: `// generated by reguerr; DO NOT EDIT
package example

import (
	"errors"
	"gitlab.com/osaki-lab/reguerr"
)

func NewInvalidInputParameterErr(err error, payload []string) *reguerr.Error {
	return InvalidInputParameterErr.WithError(err).WithArgs(payload)
}

func IsInvalidInputParameterErr(err error) bool {
	var cerr *reguerr.Error
	if as := errors.As(err, &cerr); as {
		if cerr.Code == InvalidInputParameterErr.Code {
			return true
		}
	}
	return false
}
`,
			wantErr: false,
		},
		{
			name: "Multiple_Label",
			args: arg{
				file: &File{
					PkgName: "example",
					Decls: []*Decl{
						{
							Name:   "InvalidInputParameterErr",
							Code:   "1003",
							Format: "invalid input parameter: str:%v inv:%v",
							Labels: []Label{
								{
									Index:  0,
									Name:   "strArg1",
									GoType: "string",
								},
								{
									Index:  1,
									Name:   "intArg1",
									GoType: "int",
								},
							},
						},
					},
				},
			},
			want: `// generated by reguerr; DO NOT EDIT
package example

import (
	"errors"
	"gitlab.com/osaki-lab/reguerr"
)

func NewInvalidInputParameterErr(err error, strArg1 string, intArg1 int) *reguerr.Error {
	return InvalidInputParameterErr.WithError(err).WithArgs(strArg1, intArg1)
}

func IsInvalidInputParameterErr(err error) bool {
	var cerr *reguerr.Error
	if as := errors.As(err, &cerr); as {
		if cerr.Code == InvalidInputParameterErr.Code {
			return true
		}
	}
	return false
}
`,
			wantErr: false,
		},
		{
			name: "No_Label_But_Exists_Args",
			args: arg{
				file: &File{
					PkgName: "example",
					Decls: []*Decl{
						{
							Name:   "InvalidInputParameterErr",
							Code:   "1003",
							Format: "invalid input parameter: key:%v value:%v",
							Labels: []Label{},
						},
					},
				},
			},
			want: `// generated by reguerr; DO NOT EDIT
package example

import (
	"errors"
	"gitlab.com/osaki-lab/reguerr"
)

func NewInvalidInputParameterErr(err error, arg1 interface{}, arg2 interface{}) *reguerr.Error {
	return InvalidInputParameterErr.WithError(err).WithArgs(arg1, arg2)
}

func IsInvalidInputParameterErr(err error) bool {
	var cerr *reguerr.Error
	if as := errors.As(err, &cerr); as {
		if cerr.Code == InvalidInputParameterErr.Code {
			return true
		}
	}
	return false
}
`,
			wantErr: false,
		},
		{
			name: "overwrite_default_statusCode_and_errorLevel",
			args: arg{
				file: &File{
					PkgName: "example",
					Decls: []*Decl{
						{
							Name:   "InvalidInputParameterErr",
							Code:   "1003",
							Format: "invalid input parameter",
						},
					},
				},
				opts: []Option{
						DefaultErrorLevel(reguerr.WarnLevel),
						DefaultStatusCode(501),
				},
			},
			want: `// generated by reguerr; DO NOT EDIT
package example

import (
	"errors"
	"gitlab.com/osaki-lab/reguerr"
)

func init() {
	reguerr.DefaultErrorLevel = reguerr.WarnLevel
	reguerr.DefaultStatusCode = 501
}

func NewInvalidInputParameterErr(err error) *reguerr.Error {
	return InvalidInputParameterErr.WithError(err)
}

func IsInvalidInputParameterErr(err error) bool {
	var cerr *reguerr.Error
	if as := errors.As(err, &cerr); as {
		if cerr.Code == InvalidInputParameterErr.Code {
			return true
		}
	}
	return false
}
`,
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := GenerateCode(tt.args.file, tt.args.opts...)
			if (err != nil) != tt.wantErr {
				t.Errorf("GenerateCode() error = %v, wantErr %v", err, tt.wantErr)
				return
			}

			if diff := cmp.Diff(tt.want, string(got)); diff != "" {
				t.Errorf("Traverse() mismatch (-want +got):\n%s", diff)
			}
		})
	}
}
