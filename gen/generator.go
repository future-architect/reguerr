package gen

import (
	"bytes"
	"errors"
	"go/format"
	"text/template"
)

const scansText = `
// generated by errcdgen; DO NOT EDIT
package {{.Package}}
import (
	"gitlab.com/osaki-lab/errcdgen"
)

{{range .Params}}
{{if .DisableErr}}
func New{{.Name}}({{if .LabelEnable}}{{.Args}}{{end}}) *errcdgen.CodeError {
	return {{.Name}}{{if .LabelEnable}}.WithArgs({{.ArgValues}}){{end}}
}
{{else}}
func New{{.Name}}(err error{{if .LabelEnable}}, {{.Args}}{{end}}) *errcdgen.CodeError {
	return {{.Name}}.WithError(err){{if .LabelEnable}}.WithArgs({{.ArgValues}}){{end}}
}
{{end}}
{{end}}
`

func Generate(pkg string, params []*Decl) ([]byte, error) {
	if len(params) < 1 {
		return nil, errors.New("no params found")
	}

	scansTmpl, err := template.New("errcdgen").Parse(scansText)
	if err != nil {
		return nil, err
	}

	buff := new(bytes.Buffer)
	if err := scansTmpl.Execute(buff, map[string]interface{}{"Package": pkg, "Params": params}); err != nil {
		return nil, err
	}

	return format.Source(buff.Bytes())
}
