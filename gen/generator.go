package gen

import (
	"bytes"
	"errors"
	"fmt"
	"go/format"
	"os"
	"text/template"
)

const scansText = `
// generated by reguerr; DO NOT EDIT
package {{.Package}}
import (
	"errors"
	"gitlab.com/osaki-lab/reguerr"
)

{{if .Setting.EnableInit}}
func init() {
	{{if .Setting.IsOverwriteErrorLevel -}}
	reguerr.DefaultErrorLevel = reguerr.{{.Setting.Level}}
	{{end -}}
	{{if .Setting.IsOverwriteStatusCode -}}
	reguerr.DefaultStatusCode = {{.Setting.StatusCode}}
	{{end -}}
}
{{end}}

{{range .Params}}
{{if .DisableErr}}
// {{.MessageTemplate}}
func New{{.Name}}({{if .ExistArgs}}{{.Args}}{{end}}) *reguerr.ReguError {
	return {{.Name}}{{if .ExistArgs}}.WithArgs({{.ArgValues}}){{end}}
}
{{else}}
// {{.MessageTemplate}}
func New{{.Name}}(err error{{if .ExistArgs}}, {{.Args}}{{end}}) *reguerr.ReguError {
	return {{.Name}}.WithError(err){{if .ExistArgs}}.WithArgs({{.ArgValues}}){{end}}
}
{{end}}

func Is{{.Name}}(err error) bool {
	var cerr *reguerr.ReguError
	if as := errors.As(err, &cerr); as {
		if cerr.Code() == {{.Name}}.Code() {
			return true
		}
	}
	return false
}
{{end}}
`

func GenerateCode(f *File, opts ...Option) ([]byte, error) {
	pkg := f.PkgName
	params := f.Decls

	setting := NewSetting()
	for _, opt := range opts {
		opt(setting)
	}

	if len(params) < 1 {
		return nil, errors.New("no params found")
	}

	scansTmpl, err := template.New("reguerr").Parse(scansText)
	if err != nil {
		return nil, err
	}

	buff := new(bytes.Buffer)
	if err := scansTmpl.Execute(buff, map[string]interface{}{"Package": pkg, "Params": params, "Setting": setting}); err != nil {
		return nil, err
	}

	source, err := format.Source(buff.Bytes())
	if err != nil {
		fmt.Fprintf(os.Stderr, "source format: %v\n", err)
		fmt.Fprintf(os.Stderr, string(buff.Bytes()))
	}

	return source, nil
}
